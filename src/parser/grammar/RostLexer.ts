// Generated from grammar/Rost.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";


export class RostLexer extends antlr.Lexer {
    public static readonly T__0 = 1;
    public static readonly T__1 = 2;
    public static readonly T__2 = 3;
    public static readonly T__3 = 4;
    public static readonly T__4 = 5;
    public static readonly T__5 = 6;
    public static readonly T__6 = 7;
    public static readonly T__7 = 8;
    public static readonly T__8 = 9;
    public static readonly T__9 = 10;
    public static readonly T__10 = 11;
    public static readonly T__11 = 12;
    public static readonly T__12 = 13;
    public static readonly T__13 = 14;
    public static readonly T__14 = 15;
    public static readonly T__15 = 16;
    public static readonly T__16 = 17;
    public static readonly T__17 = 18;
    public static readonly T__18 = 19;
    public static readonly T__19 = 20;
    public static readonly T__20 = 21;
    public static readonly T__21 = 22;
    public static readonly T__22 = 23;
    public static readonly T__23 = 24;
    public static readonly T__24 = 25;
    public static readonly T__25 = 26;
    public static readonly T__26 = 27;
    public static readonly T__27 = 28;
    public static readonly T__28 = 29;
    public static readonly T__29 = 30;
    public static readonly T__30 = 31;
    public static readonly TYPE = 32;
    public static readonly BOOL = 33;
    public static readonly INT = 34;
    public static readonly IDENTIFIER = 35;
    public static readonly WS = 36;

    public static readonly channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    ];

    public static readonly literalNames = [
        null, "'{'", "'}'", "'l\\u00E5t'", "':'", "'='", "';'", "'mut'", 
        "'fn'", "'('", "')'", "'->'", "','", "'returnera'", "'om'", "'annars'", 
        "'medan'", "'bryt'", "'forts\\u00E4tt'", "'*'", "'/'", "'+'", "'-'", 
        "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'!'"
    ];

    public static readonly symbolicNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, "TYPE", 
        "BOOL", "INT", "IDENTIFIER", "WS"
    ];

    public static readonly modeNames = [
        "DEFAULT_MODE",
    ];

    public static readonly ruleNames = [
        "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", 
        "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", 
        "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", 
        "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "TYPE", 
        "BOOL", "INT", "IDENTIFIER", "WS",
    ];


    public constructor(input: antlr.CharStream) {
        super(input);
        this.interpreter = new antlr.LexerATNSimulator(this, RostLexer._ATN, RostLexer.decisionsToDFA, new antlr.PredictionContextCache());
    }

    public get grammarFileName(): string { return "Rost.g4"; }

    public get literalNames(): (string | null)[] { return RostLexer.literalNames; }
    public get symbolicNames(): (string | null)[] { return RostLexer.symbolicNames; }
    public get ruleNames(): string[] { return RostLexer.ruleNames; }

    public get serializedATN(): number[] { return RostLexer._serializedATN; }

    public get channelNames(): string[] { return RostLexer.channelNames; }

    public get modeNames(): string[] { return RostLexer.modeNames; }

    public static readonly _serializedATN: number[] = [
        4,0,36,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,
        1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,
        1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
        1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,183,8,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,195,8,32,1,33,4,33,198,8,
        33,11,33,12,33,199,1,34,1,34,5,34,204,8,34,10,34,12,34,207,9,34,
        1,35,4,35,210,8,35,11,35,12,35,211,1,35,1,35,0,0,36,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,
        4,1,0,48,57,7,0,65,90,95,95,97,122,196,197,214,214,228,229,246,246,
        8,0,48,57,65,90,95,95,97,122,196,197,214,214,228,229,246,246,3,0,
        9,10,13,13,32,32,219,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,75,1,0,0,0,5,77,1,0,
        0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,91,
        1,0,0,0,17,94,1,0,0,0,19,96,1,0,0,0,21,98,1,0,0,0,23,101,1,0,0,0,
        25,103,1,0,0,0,27,113,1,0,0,0,29,116,1,0,0,0,31,123,1,0,0,0,33,129,
        1,0,0,0,35,134,1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,147,1,0,
        0,0,43,149,1,0,0,0,45,151,1,0,0,0,47,154,1,0,0,0,49,157,1,0,0,0,
        51,160,1,0,0,0,53,163,1,0,0,0,55,166,1,0,0,0,57,169,1,0,0,0,59,171,
        1,0,0,0,61,173,1,0,0,0,63,182,1,0,0,0,65,194,1,0,0,0,67,197,1,0,
        0,0,69,201,1,0,0,0,71,209,1,0,0,0,73,74,5,123,0,0,74,2,1,0,0,0,75,
        76,5,125,0,0,76,4,1,0,0,0,77,78,5,108,0,0,78,79,5,229,0,0,79,80,
        5,116,0,0,80,6,1,0,0,0,81,82,5,58,0,0,82,8,1,0,0,0,83,84,5,61,0,
        0,84,10,1,0,0,0,85,86,5,59,0,0,86,12,1,0,0,0,87,88,5,109,0,0,88,
        89,5,117,0,0,89,90,5,116,0,0,90,14,1,0,0,0,91,92,5,102,0,0,92,93,
        5,110,0,0,93,16,1,0,0,0,94,95,5,40,0,0,95,18,1,0,0,0,96,97,5,41,
        0,0,97,20,1,0,0,0,98,99,5,45,0,0,99,100,5,62,0,0,100,22,1,0,0,0,
        101,102,5,44,0,0,102,24,1,0,0,0,103,104,5,114,0,0,104,105,5,101,
        0,0,105,106,5,116,0,0,106,107,5,117,0,0,107,108,5,114,0,0,108,109,
        5,110,0,0,109,110,5,101,0,0,110,111,5,114,0,0,111,112,5,97,0,0,112,
        26,1,0,0,0,113,114,5,111,0,0,114,115,5,109,0,0,115,28,1,0,0,0,116,
        117,5,97,0,0,117,118,5,110,0,0,118,119,5,110,0,0,119,120,5,97,0,
        0,120,121,5,114,0,0,121,122,5,115,0,0,122,30,1,0,0,0,123,124,5,109,
        0,0,124,125,5,101,0,0,125,126,5,100,0,0,126,127,5,97,0,0,127,128,
        5,110,0,0,128,32,1,0,0,0,129,130,5,98,0,0,130,131,5,114,0,0,131,
        132,5,121,0,0,132,133,5,116,0,0,133,34,1,0,0,0,134,135,5,102,0,0,
        135,136,5,111,0,0,136,137,5,114,0,0,137,138,5,116,0,0,138,139,5,
        115,0,0,139,140,5,228,0,0,140,141,5,116,0,0,141,142,5,116,0,0,142,
        36,1,0,0,0,143,144,5,42,0,0,144,38,1,0,0,0,145,146,5,47,0,0,146,
        40,1,0,0,0,147,148,5,43,0,0,148,42,1,0,0,0,149,150,5,45,0,0,150,
        44,1,0,0,0,151,152,5,38,0,0,152,153,5,38,0,0,153,46,1,0,0,0,154,
        155,5,124,0,0,155,156,5,124,0,0,156,48,1,0,0,0,157,158,5,61,0,0,
        158,159,5,61,0,0,159,50,1,0,0,0,160,161,5,33,0,0,161,162,5,61,0,
        0,162,52,1,0,0,0,163,164,5,60,0,0,164,165,5,61,0,0,165,54,1,0,0,
        0,166,167,5,62,0,0,167,168,5,61,0,0,168,56,1,0,0,0,169,170,5,60,
        0,0,170,58,1,0,0,0,171,172,5,62,0,0,172,60,1,0,0,0,173,174,5,33,
        0,0,174,62,1,0,0,0,175,176,5,98,0,0,176,177,5,111,0,0,177,178,5,
        111,0,0,178,183,5,108,0,0,179,180,5,105,0,0,180,181,5,51,0,0,181,
        183,5,50,0,0,182,175,1,0,0,0,182,179,1,0,0,0,183,64,1,0,0,0,184,
        185,5,115,0,0,185,186,5,97,0,0,186,187,5,110,0,0,187,195,5,116,0,
        0,188,189,5,102,0,0,189,190,5,97,0,0,190,191,5,108,0,0,191,192,5,
        115,0,0,192,193,5,107,0,0,193,195,5,116,0,0,194,184,1,0,0,0,194,
        188,1,0,0,0,195,66,1,0,0,0,196,198,7,0,0,0,197,196,1,0,0,0,198,199,
        1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,68,1,0,0,0,201,205,7,
        1,0,0,202,204,7,2,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,
        0,0,0,205,206,1,0,0,0,206,70,1,0,0,0,207,205,1,0,0,0,208,210,7,3,
        0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,
        0,0,212,213,1,0,0,0,213,214,6,35,0,0,214,72,1,0,0,0,6,0,182,194,
        199,205,211,1,6,0,0
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!RostLexer.__ATN) {
            RostLexer.__ATN = new antlr.ATNDeserializer().deserialize(RostLexer._serializedATN);
        }

        return RostLexer.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(RostLexer.literalNames, RostLexer.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return RostLexer.vocabulary;
    }

    private static readonly decisionsToDFA = RostLexer._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}